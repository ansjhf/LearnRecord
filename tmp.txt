import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.model.SharedStringsTable;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import org.springframework.web.multipart.MultipartFile;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class ExcelSaxReader {

    public static List<String> readFirstRow(MultipartFile file) throws Exception {
        try (InputStream is = file.getInputStream()) {
            OPCPackage opcPackage = OPCPackage.open(is);
            XSSFReader xssfReader = new XSSFReader(opcPackage);
            SharedStringsTable sst = xssfReader.getSharedStringsTable();
            XMLReader parser = fetchSheetParser(sst);

            try (InputStream sheetInputStream = xssfReader.getSheetsData().next()) {
                InputSource sheetSource = new InputSource(sheetInputStream);
                FirstRowHandler handler = new FirstRowHandler();
                parser.setContentHandler(handler);
                parser.parse(sheetSource);
                return handler.getFirstRow();
            }
        }
    }

    private static XMLReader fetchSheetParser(SharedStringsTable sst) throws SAXException, ParserConfigurationException {
        SAXParserFactory factory = SAXParserFactory.newInstance();
        SAXParser saxParser = factory.newSAXParser();
        XMLReader parser = saxParser.getXMLReader();
        parser.setContentHandler(new FirstRowHandler(sst));
        return parser;
    }

    private static class FirstRowHandler extends DefaultHandler {
        private final SharedStringsTable sst;
        private boolean isFirstRow = true;
        private boolean isCellValue = false;
        private boolean isString = false;
        private final DataFormatter formatter = new DataFormatter();
        private final List<String> firstRow = new ArrayList<>();

        public FirstRowHandler(SharedStringsTable sst) {
            this.sst = sst;
        }

        public FirstRowHandler() {
            this.sst = null;
        }

        public List<String> getFirstRow() {
            return firstRow;
        }

        @Override
        public void startElement(String uri, String localName, String name, Attributes attributes) {
            if ("row".equals(name) && !isFirstRow) {
                throw new SAXException("Stop parsing after first row");
            }
            if ("c".equals(name)) {
                String cellType = attributes.getValue("t");
                isString = "s".equals(cellType);
                isCellValue = true;
            }
        }

        @Override
        public void endElement(String uri, String localName, String name) {
            if ("row".equals(name)) {
                isFirstRow = false;
            }
            if ("c".equals(name)) {
                if (isCellValue) {
                    firstRow.add("");  // 空单元格填充空字符串
                }
                isCellValue = false;
            }
        }

        @Override
        public void characters(char[] ch, int start, int length) {
            if (isCellValue) {
                String value = new String(ch, start, length).trim();
                if (isString && sst != null) {
                    int idx = Integer.parseInt(value);
                    value = new XSSFRichTextString(sst.getEntryAt(idx)).toString();
                }
                firstRow.set(firstRow.size() - 1, value);
            }
        }
    }
}