import org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler.SheetContentsHandler;

import java.util.ArrayList;
import java.util.List;

public class SheetHandler implements SheetContentsHandler {

    private List<String> currentRow;
    private final List<String> headers = new ArrayList<>();
    private final List<List<String>> buffer = new ArrayList<>();
    private static final int BATCH_SIZE = 1000;

    @Override
    public void startRow(int rowNum) {
        currentRow = new ArrayList<>();
    }

    @Override
    public void cell(String cellReference, String formattedValue, org.apache.poi.xssf.usermodel.XSSFComment comment) {
        // 强制使用纯文本（formattedValue 就是显示值）
        String value = formattedValue != null ? formattedValue : "";
        currentRow.add(value);
    }

    @Override
    public void endRow(int rowNum) {
        if (rowNum == 0) {
            headers.addAll(currentRow);
            System.out.println("表头字段：" + headers);
        } else {
            buffer.add(new ArrayList<>(currentRow));
            if (buffer.size() >= BATCH_SIZE) {
                handleBatch(buffer);
                buffer.clear();
            }
        }
    }

    @Override
    public void endSheet() {
        if (!buffer.isEmpty()) {
            handleBatch(buffer);
        }
    }

    private void handleBatch(List<List<String>> batch) {
        System.out.println("处理批次，行数：" + batch.size());
        // 可以在这里处理写库逻辑
    }
}


import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xssf.eventusermodel.ReadOnlySharedStringsTable;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.model.StylesTable;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;
import org.apache.poi.xssf.eventusermodel.XSSFReader.SheetIterator;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;

import java.io.InputStream;

public class ExcelSaxReader {

    public void readExcel(String filePath) throws Exception {
        try (OPCPackage pkg = OPCPackage.open(filePath)) {
            XSSFReader reader = new XSSFReader(pkg);
            StylesTable styles = reader.getStylesTable(); // 可以传 null
            ReadOnlySharedStringsTable sst = new ReadOnlySharedStringsTable(pkg);

            SheetHandler handler = new SheetHandler();
            DataFormatter formatter = new DataFormatter(); // 默认构造，即纯字符串

            XMLReader parser = XMLReaderFactory.createXMLReader();

            XSSFSheetXMLHandler sheetHandler = new XSSFSheetXMLHandler(
                    styles, // 可以是 null
                    null,   // 无评论
                    sst,
                    handler,
                    formatter,
                    true     // ✅ 保持为 true，启用格式化（以获取 Excel 中显示的值）
            );

            parser.setContentHandler(sheetHandler);

            // 只读取第一个 sheet
            SheetIterator sheets = (SheetIterator) reader.getSheetsData();
            if (sheets.hasNext()) {
                try (InputStream sheetStream = sheets.next()) {
                    parser.parse(new InputSource(sheetStream));
                }
            }
        }
    }
}
