import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.model.SharedStringsTable;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.springframework.web.multipart.MultipartFile;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * 使用SAX方式解析Excel，获取第一个sheet的第一行数据
 */
public class ExcelSAXReader {

    public static List<String> readFirstRow(MultipartFile file) throws Exception {
        try (InputStream inputStream = file.getInputStream()) {
            OPCPackage opcPackage = OPCPackage.open(inputStream);
            XSSFReader reader = new XSSFReader(opcPackage);
            SharedStringsTable sst = reader.getSharedStringsTable();
            InputStream sheetInputStream = reader.getSheetsData().next(); // 读取第一个 sheet
            FirstRowHandler handler = new FirstRowHandler(sst);
            
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse(new InputSource(sheetInputStream), handler);
            
            return handler.getFirstRow();
        }
    }

    private static class FirstRowHandler extends DefaultHandler {
        private final SharedStringsTable sst;
        private final DataFormatter formatter = new DataFormatter();
        private boolean isString;
        private List<String> firstRow = new ArrayList<>();
        private boolean isFirstRow = true;
        private int lastColIndex = -1;
        private int currentColIndex = -1;
        private StringBuilder currentValue = new StringBuilder();

        public FirstRowHandler(SharedStringsTable sst) {
            this.sst = sst;
        }

        public List<String> getFirstRow() {
            return firstRow.isEmpty() || firstRow.stream().allMatch(String::isEmpty) ? new ArrayList<>() : firstRow;
        }

        @Override
        public void startElement(String uri, String localName, String name, Attributes attributes) {
            if ("row".equals(name) && !isFirstRow) {
                // 只读取第一行，后续行忽略
                throw new StopParsingException();
            }

            if ("c".equals(name)) {
                String colRef = attributes.getValue("r");
                currentColIndex = getColumnIndex(colRef);
                
                // 如果当前单元格不是紧挨着的，则填充空字符串
                while (lastColIndex + 1 < currentColIndex) {
                    firstRow.add("");
                    lastColIndex++;
                }

                String cellType = attributes.getValue("t");
                isString = "s".equals(cellType);
                currentValue.setLength(0); // 清空当前值
            }
        }

        @Override
        public void characters(char[] ch, int start, int length) {
            currentValue.append(ch, start, length);
        }

        @Override
        public void endElement(String uri, String localName, String name) {
            if ("c".equals(name)) {
                String value = currentValue.toString().trim();
                if (isString) {
                    int idx = Integer.parseInt(value);
                    value = new XSSFRichTextString(sst.getItemAt(idx).getString()).toString();
                }
                firstRow.add(value);
                lastColIndex = currentColIndex;
            } else if ("row".equals(name)) {
                isFirstRow = false;
            }
        }

        private int getColumnIndex(String cellRef) {
            int index = 0;
            for (char c : cellRef.toCharArray()) {
                if (Character.isLetter(c)) {
                    index = index * 26 + (c - 'A' + 1);
                }
            }
            return index - 1;
        }
    }

    private static class StopParsingException extends RuntimeException {
        private static final long serialVersionUID = 1L;
    }
}