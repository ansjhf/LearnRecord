package com.example.logging;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.*;
import org.apache.logging.log4j.core.config.plugins.*;
import org.apache.logging.log4j.core.layout.PatternLayout;
import org.apache.logging.log4j.core.appender.AbstractAppender;
import org.apache.logging.log4j.core.LogEvent;

import java.io.Serializable;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Plugin(name = "LevelBasedLimitAppender", category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE)
public class LevelBasedLimitAppender extends AbstractAppender {

    private final Map<Level, Integer> levelCountMap = new ConcurrentHashMap<>();

    private final int errorLimit;
    private final int otherLimit;

    protected LevelBasedLimitAppender(String name, Filter filter, Layout<? extends Serializable> layout,
                                      boolean ignoreExceptions, int errorLimit, int otherLimit) {
        super(name, filter, layout, ignoreExceptions);
        this.errorLimit = errorLimit;
        this.otherLimit = otherLimit;
    }

    @PluginFactory
    public static LevelBasedLimitAppender createAppender(
            @PluginAttribute("name") String name,
            @PluginAttribute(value = "errorLimit", defaultInt = 20) int errorLimit,
            @PluginAttribute(value = "otherLimit", defaultInt = 5) int otherLimit,
            @PluginElement("Layout") Layout<? extends Serializable> layout,
            @PluginElement("Filter") final Filter filter) {

        if (name == null) {
            LOGGER.error("No name provided for LevelBasedLimitAppender");
            return null;
        }

        if (layout == null) {
            layout = PatternLayout.createDefaultLayout();
        }

        return new LevelBasedLimitAppender(name, filter, layout, true, errorLimit, otherLimit);
    }

    @Override
    public void append(LogEvent event) {
        Level level = event.getLevel();
        int limit = (level == Level.ERROR) ? errorLimit : otherLimit;

        levelCountMap.putIfAbsent(level, 0);
        int currentCount = levelCountMap.get(level);

        if (currentCount < limit) {
            levelCountMap.put(level, currentCount + 1);
            byte[] bytes = getLayout().toByteArray(event);
            System.out.write(bytes, 0, bytes.length); // 输出到控制台
        }
    }
}

<Configuration status="WARN" packages="com.example.logging">
    <Appenders>
        <LevelBasedLimitAppender name="LimitedConsole" errorLimit="20" otherLimit="5">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </LevelBasedLimitAppender>
    </Appenders>

    <Loggers>
        <Root level="debug">
            <AppenderRef ref="LimitedConsole"/>
        </Root>
    </Loggers>
</Configuration>

